name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.14.4'
  TURBO_API: https://turbo.build
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  COVERAGE_THRESHOLD: 80

jobs:
  validate:
    name: Validate & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for affected checks
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Check exports maps
        run: node scripts/check-exports.mjs
      
      - name: Check for deep imports
        run: node scripts/find-deep-imports.mjs
      
      - name: Type check
        run: pnpm typecheck --filter=...[origin/${{ github.base_ref || 'main' }}]
      
      - name: Lint
        run: pnpm lint --filter=...[origin/${{ github.base_ref || 'main' }}]
      
      - name: Unit tests with coverage
        run: pnpm test:coverage --filter=...[origin/${{ github.base_ref || 'main' }}]
      
      - name: Check coverage threshold
        run: |
          # Enhanced coverage validation with specific thresholds
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct)")
            echo "Current coverage: ${COVERAGE}%"
            if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
              echo "‚ùå Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
              exit 1
            else
              echo "‚úÖ Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"
            fi
          else
            echo "‚ö†Ô∏è Coverage report not found, skipping threshold check"
          fi
      
      - name: Build
        run: pnpm build --filter=...[origin/${{ github.base_ref || 'main' }}]
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage reports as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
      
      - name: Check for unused dependencies
        run: |
          echo "üîç Checking for unused dependencies..."
          npx knip --reporter json > knip-report.json || true
          if [ -s knip-report.json ]; then
            echo "‚ö†Ô∏è Found potential unused dependencies - review knip-report.json"
            cat knip-report.json
          else
            echo "‚úÖ No unused dependencies detected"
          fi
      
      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          pnpm audit --audit-level moderate --json > audit-report.json || AUDIT_EXIT_CODE=$?
          if [ -s audit-report.json ]; then
            echo "üìä Security audit results:"
            cat audit-report.json | jq '.advisories | length' || echo "Audit completed"
          fi
          if [ "${AUDIT_EXIT_CODE:-0}" -ne 0 ]; then
            echo "‚ö†Ô∏è Security vulnerabilities found - review audit-report.json"
            exit 1
          else
            echo "‚úÖ No security vulnerabilities detected"
          fi

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm --filter @echoforge/e2e install-browsers
      
      - name: Build dashboard for e2e
        run: pnpm --filter @echoforge/dashboard build
      
      - name: Run E2E tests
        run: pnpm e2e
        timeout-minutes: 10
      
      - name: Upload E2E report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run security audit
        run: pnpm audit --omit=dev || true
